{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conquest Documentation Heads up: this site does not include complete documentation for ReplicatedStorage modules or the remotes system. For more information on the framework, check out this site. Conquest is a turn-based multiplayer game about acquiring land and taking over the world, similar to Monopoly.","title":"Home"},{"location":"#conquest-documentation","text":"Heads up: this site does not include complete documentation for ReplicatedStorage modules or the remotes system. For more information on the framework, check out this site. Conquest is a turn-based multiplayer game about acquiring land and taking over the world, similar to Monopoly.","title":"Conquest Documentation"},{"location":"changelog/","text":"12/2/2019 // v3 // Still documenting stuff Added Enums page Added Modules category Added Remotes category 11/23/2019 // v2 // Starting to document stuff Added synopsis to front page. Added request format documentation. 11/8/2019 // v1 // Documentation established Site now exists! Pretty much no content except for a link to the framework site and the changelog itself. More to come.","title":"Changelog"},{"location":"changelog/#1222019-v3-still-documenting-stuff","text":"Added Enums page Added Modules category Added Remotes category","title":"12/2/2019 // v3 // Still documenting stuff"},{"location":"changelog/#11232019-v2-starting-to-document-stuff","text":"Added synopsis to front page. Added request format documentation.","title":"11/23/2019 // v2 // Starting to document stuff"},{"location":"changelog/#1182019-v1-documentation-established","text":"Site now exists! Pretty much no content except for a link to the framework site and the changelog itself. More to come.","title":"11/8/2019 // v1 // Documentation established"},{"location":"enums/","text":"Custom enums used by the game. NOTE: Enums sent across the network can't be compared properly, since they've had their metatables removed. Compare their Value properties instead, like this: serverEnum.Value=clientEnum.Value MenuTitle Name Value Changelog 1 ServerType Name Value Lobby 1 Game 2","title":"Enums"},{"location":"enums/#menutitle","text":"Name Value Changelog 1","title":"MenuTitle"},{"location":"enums/#servertype","text":"Name Value Lobby 1 Game 2","title":"ServerType"},{"location":"meme/","text":"I spent 10 minutes trying to get a video to embed here. No luck. I give up. You get nothing.","title":"Meme"},{"location":"requestFormat/","text":"When remotes are fired from the client to the server, they should be formatted as requests. A request is an attempt to complete an action, with the possibility of failing with a user-friendly error message depending on the context. Actual logic and syntax errors should not send a response, but simply terminate the process and throw an error to be dealt with. Example local registerRemote=Remote(\"Register\") local success,response,ID=registerRemote.Remote:InvokeServer(game.Players.LocalPlayer) if not success then --show response to the player. else --do something with the ID. end Response Format Type Name Description bool success Whether or not the request was successful. string response A message explaining why a request might have failed. There's no need to check this if a request is successful. ... data Any normal parameters to be received.","title":"Requests"},{"location":"requestFormat/#example","text":"local registerRemote=Remote(\"Register\") local success,response,ID=registerRemote.Remote:InvokeServer(game.Players.LocalPlayer) if not success then --show response to the player. else --do something with the ID. end","title":"Example"},{"location":"requestFormat/#response-format","text":"Type Name Description bool success Whether or not the request was successful. string response A message explaining why a request might have failed. There's no need to check this if a request is successful. ... data Any normal parameters to be received.","title":"Response Format"},{"location":"modules/matchmaker/","text":"A Matchmaker is a class for creating a matchmaking zone with a Region3 or a part to represent a Region3. When enough players are standing in the zone, they'll be teleported to a reserved server. customVerify The optional customVerify parameter is used to vet each player. The function should receive the player as an argument, and return true if they should be allowed to play, or false if not. Constructor Return Function Description void Matchmaker.new(Region3/BasePart zoneMarker[function customVerify]) Creates a new Matchmaker in the specified zone, only allowing players to enter if they can pass the custom verification function. Configuration Configuration properties can be changed at the top of the Matchmaker module. Type Property Description int MIN_PLAYERS The minimum player count to start a match. int MAX_PLAYERS The maximum amount of players allowed in a match. int COUNTDOWN How many seconds the minimum player count needs to be reached before a game starts.","title":"Matchmaker"},{"location":"modules/matchmaker/#customverify","text":"The optional customVerify parameter is used to vet each player. The function should receive the player as an argument, and return true if they should be allowed to play, or false if not.","title":"customVerify"},{"location":"modules/matchmaker/#constructor","text":"Return Function Description void Matchmaker.new(Region3/BasePart zoneMarker[function customVerify]) Creates a new Matchmaker in the specified zone, only allowing players to enter if they can pass the custom verification function.","title":"Constructor"},{"location":"modules/matchmaker/#configuration","text":"Configuration properties can be changed at the top of the Matchmaker module. Type Property Description int MIN_PLAYERS The minimum player count to start a match. int MAX_PLAYERS The maximum amount of players allowed in a match. int COUNTDOWN How many seconds the minimum player count needs to be reached before a game starts.","title":"Configuration"},{"location":"remotes/getServerType/","text":"GetServerType returns whether or not the current server is a lobby or a game. A game is any server with a private server ID (and thus is a reserved server) and a lobby is the opposite. Returns Type Description ServerType The current server type. Receivers Name GetServerTypeManager","title":"GetServerType"},{"location":"remotes/getServerType/#returns","text":"Type Description ServerType The current server type.","title":"Returns"},{"location":"remotes/getServerType/#receivers","text":"Name GetServerTypeManager","title":"Receivers"}]}